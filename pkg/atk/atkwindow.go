// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_window_get_type()), F: marshalWindower},
	})
}

// Window should be implemented by the UI elements that represent a top-level
// window, such as the main window of an application or dialog.
type Window struct {
	ObjectClass
}

// Windower describes Window's abstract methods.
type Windower interface {
	externglib.Objector

	privateWindow()
}

var _ Windower = (*Window)(nil)

func WrapWindow(obj *externglib.Object) *Window {
	return &Window{
		ObjectClass: ObjectClass{
			Object: obj,
		},
	}
}

func marshalWindower(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return WrapWindow(obj), nil
}

func (*Window) privateWindow() {}
